/*
 * GarageSeller
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace GarageSeller.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CarInfo : IEquatable<CarInfo>
    { 
        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [Required]
        [DataMember(Name="model")]
        [StringLength(50, ErrorMessage = "Maximum string length error", MinimumLength = 3)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [Required]
        [DataMember(Name="year")]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [Required]
        [DataMember(Name="price")]
        public decimal Price { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [Required]
        [DataMember(Name="serialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets SoldDateUtc
        /// </summary>
        [Required]
        [DataMember(Name="soldDateUtc")]
        public DateTime SoldDateUtc { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Transmission
        /// </summary>
        [Required]
        [DataMember(Name="transmission")]
        public Transmission? Transmission { get; set; }

        /// <summary>
        /// Gets or Sets Motor
        /// </summary>
        [Required]
        [DataMember(Name="motor")]
        public Motor Motor { get; set; }

        /// <summary>
        /// Gets or Sets GarageId
        /// </summary>
        [Required]
        [DataMember(Name="garageId")]
        public int GarageId { get; set; }

        /// <summary>
        /// Gets or Sets SellerId
        /// </summary>
        [Required]
        [DataMember(Name="sellerId")]
        public int SellerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CarInfo {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  SoldDateUtc: ").Append(SoldDateUtc).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Transmission: ").Append(Transmission).Append("\n");
            sb.Append("  Motor: ").Append(Motor).Append("\n");
            sb.Append("  GarageId: ").Append(GarageId).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CarInfo)obj);
        }

        /// <summary>
        /// Returns true if CarInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of CarInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CarInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Year == other.Year ||
                    Year != null &&
                    Year.Equals(other.Year)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    SoldDateUtc == other.SoldDateUtc ||
                    SoldDateUtc != null &&
                    SoldDateUtc.Equals(other.SoldDateUtc)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    Transmission == other.Transmission ||
                    Transmission != null &&
                    Transmission.Equals(other.Transmission)
                ) && 
                (
                    Motor == other.Motor ||
                    Motor != null &&
                    Motor.Equals(other.Motor)
                ) && 
                (
                    GarageId == other.GarageId ||
                    GarageId != null &&
                    GarageId.Equals(other.GarageId)
                ) && 
                (
                    SellerId == other.SellerId ||
                    SellerId != null &&
                    SellerId.Equals(other.SellerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (Year != null)
                    hashCode = hashCode * 59 + Year.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (SoldDateUtc != null)
                    hashCode = hashCode * 59 + SoldDateUtc.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Transmission != null)
                    hashCode = hashCode * 59 + Transmission.GetHashCode();
                    if (Motor != null)
                    hashCode = hashCode * 59 + Motor.GetHashCode();
                    if (GarageId != null)
                    hashCode = hashCode * 59 + GarageId.GetHashCode();
                    if (SellerId != null)
                    hashCode = hashCode * 59 + SellerId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CarInfo left, CarInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CarInfo left, CarInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
